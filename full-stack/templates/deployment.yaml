{{- $root := . -}}
{{- $env := .Values.global.env -}}
{{- $global := .Values.global -}}
{{- $provider := .Values.global.zone.provider -}}
{{- $defaults := .Values.serviceDefaults -}}

{{- range $serviceName, $service := .Values.services }}
{{- with $service }}
{{- if or (not (hasKey . "enabled")) (.enabled) }}
{{- $type := default "service" .type -}}
{{- if eq "service" $type }}
{{- if .autoscale }}
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ template "myfullname" $root }}-{{ $serviceName }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ template "myname" $root }}-{{ $serviceName }}
  minReplicas: {{ .minReplicas | default $defaults.minReplicas }}
  maxReplicas: {{ .maxReplicas | default $defaults.maxReplicas }}
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: {{ .autoscaleCpuPercentage | default $defaults.autoscaleCpuPercentage }}
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: {{ .autoscaleMemoryPercentage | default $defaults.autoscaleMemoryPercentage }}
---
{{- end }}
{{- if .verticalScaleUpdateMode }}
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: {{ template "myfullname" $root }}-{{ $serviceName }}
spec:
  targetRef:
    apiVersion: "apps/v1"
    kind: Deployment
    name: {{ template "myname" $root }}-{{ $serviceName }}
  updatePolicy:
    updateMode: {{ .verticalScaleUpdateMode }}
---
{{- end }}

{{- $httpProxy := dict "enabled" false -}}
{{- if $root.Values.networkPolicyEnabled}}
{{- range $egress := .egress }}
{{- if $egress.domain }}
{{- $dummy := set $httpProxy "enabled" true -}}
{{- end }}
{{- end }}
{{- end }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "myfullname" $root }}-{{ $serviceName }}
spec:
  replicas: {{ .replicas | default $defaults.replicas }}
  selector:
    matchLabels:
      app: {{ template "myname" $root }}
      release: {{ $root.Release.Name }}
      {{- if default $defaults.tier .tier }}
      tier: {{ default $defaults.tier .tier }}
      {{- end }}
      role: {{ $serviceName }}
  {{- if default $defaults.strategyType .strategyType }}
  strategy:
    type: {{ default $defaults.strategyType .strategyType }}
    {{- if eq (default $defaults.strategyType .strategyType) "Recreate" }}
    rollingUpdate: null
    {{- end }}
  {{- end }}
  template:
    metadata:
      labels:
        fullname: {{ template "myfullname" $root }}-{{ $serviceName }}
        app: {{ template "myname" $root }}
        release: {{ $root.Release.Name }}
        {{- if default $defaults.tier .tier }}
        tier: {{ default $defaults.tier .tier }}
        {{- end }}
        role: {{ $serviceName }}
        {{- if $root.Values.networkPolicyEnabled}}
        {{- range $egress := .egress }}
        {{- if $egress.fullname }}
        access-{{ $egress.fullname }}: "true"
        {{- end }}
        {{- end }}
        {{- if $httpProxy.enabled }}
        access-{{ template "myfullname" $root }}-{{ $serviceName }}-http-proxy: "true"
        {{- end }}
        {{- end }}
    spec:
      securityContext:
        {{- if quote .fsGroup }}
        fsGroup: {{ .fsGroup }}
        {{- end }}
        {{- if .sysctls }}
        sysctls: {{ mustToPrettyJson .sysctls }}
        {{- end }}
      {{- if default $defaults.serviceAccountName .serviceAccountName }}
      serviceAccountName: {{ default $defaults.serviceAccountName .serviceAccountName }}
      {{- else }}
      serviceAccountName: {{ template "myfullname" $root }}
      {{- end }}
      automountServiceAccountToken: false
      {{- if .nodeSelector }}
      nodeSelector:
      {{- range $name, $value := .nodeSelector }}
        {{ $name }}: {{ $value | quote }}
      {{- end }}
      {{- else if $defaults.nodeSelector }}
      nodeSelector:
      {{- range $name, $value := $defaults.nodeSelector }}
        {{ $name }}: {{ $value | quote }}
      {{- end }}
      {{- end }}
      affinity:
        podAffinity:
          {{- if .placementSameAs }}
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: "release"
                operator: In
                values:
                - {{ $root.Release.Name }}
              - key: "role"
                operator: In
                values:
                - {{ .placementSameAs }}
            topologyKey: "kubernetes.io/hostname"
          {{- end }}
          {{- if .placementPreferSameAs }}
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "release"
                  operator: In
                  values:
                  - {{ $root.Release.Name }}
                - key: "role"
                  operator: In
                  values:
                  - {{ .placementPreferSameAs }}
              topologyKey: "kubernetes.io/hostname"
          {{- end }}
      initContainers:
      {{- if .initCommand }}
        - name: {{ template "myname" $root }}-{{ $serviceName }}-init
          image: busybox
          command: ['sh', '-c', {{ .initCommand | quote }}]
          volumeMounts:
          {{- if .temporaryVolumeMounts }}
          {{- range .temporaryVolumeMounts }}
            - mountPath: {{ .mountPath }}
              name: temporary-volume
              subPath: {{ .volumePath }}
              readOnly: {{ .readOnly }}
          {{- end }}
          {{- end }}
          {{- if $root.Values.persistence.enabled }}
          {{- if .persistentVolumeMounts }}
          {{- range .persistentVolumeMounts }}
            - mountPath: {{ .mountPath }}
              name: persistent-volume
              subPath: {{ .volumePath }}
              readOnly: {{ .readOnly }}
          {{- end }}
          {{- end }}
          {{- end }}
      {{- end }}
      containers:
        - name: {{ template "myname" $root }}-{{ $serviceName }}
          {{- if .image }}
          image: {{ .image }}
          {{- else }}
          image: {{ $global.registry -}} / {{- $serviceName -}} : {{- $global.build.imageTag }}
          {{- end }}
          imagePullPolicy: {{ $global.imagePullPolicy | quote }}
          securityContext:
            {{- if quote .runAsUser }}
            runAsUser: {{ .runAsUser }}
            {{- end }}
            {{- if quote .runAsGroup }}
            runAsGroup: {{ .runAsGroup }}
            {{- end }}
            privileged: {{ .privileged | default false }}
            allowPrivilegeEscalation: {{ .allowPrivilegeEscalation | default false }}
            capabilities:
              add:
                {{- if .capabilities }}
                {{- range $cab := .capabilities }}
                - {{ $cab }}
                {{- end }}
                {{- end }}
          {{- if .command }}
          command:
            {{- range .command }}
            - {{ . | quote }}
            {{- end }}
          {{- end }}
          {{- if .stdin }}
          stdin: {{ .stdin }}
          {{- end }}
          {{- if .tty }}
          tty: {{ .tty }}
          {{- end }}
          ports:
            - containerPort: {{ .targetPort | default .port | default $defaults.port }}
            {{- range $p := .ports }}
            - containerPort: {{ $p.targetPort | default $p.port }}
            {{- end }}
          resources:
            requests:
              cpu: {{ .cpuRequest | default $defaults.cpuRequest }}
              memory: {{ .memoryRequest | default $defaults.memoryRequest }}
            limits:
              cpu: {{ .cpuLimit | default $defaults.cpuLimit }}
              memory: {{ .memoryLimit | default $defaults.memoryLimit }}
              {{- if .gpuLimit }}
              nvidia.com/gpu: {{ .gpuLimit }}
              {{- end }}
          {{- if not .livenessDisabled }}
          livenessProbe:
            {{- if .livenessCommand }}
            exec:
              command:
              {{- range .livenessCommand }}
              - {{ . }}
              {{- end }}
            {{- else }}
            httpGet:
              path: {{ coalesce .livenessPath $defaults.livenessPath }}
              port: {{ coalesce .livenessPort .port $defaults.port }}
              scheme: HTTP
            {{- end }}
            initialDelaySeconds: {{ coalesce .livenessInitialDelay $defaults.livenessInitialDelay }}
            periodSeconds: {{ coalesce .livenessPeriod $defaults.livenessPeriod 10 }}
            timeoutSeconds: {{ coalesce .livenessTimeout $defaults.livenessTimeout 3 }}
            failureThreshold: {{ coalesce .livenessFailureThreshold $defaults.livenessFailureThreshold 3 }}
            successThreshold: {{ coalesce .livenessSuccessThreshold $defaults.livenessSuccessThreshold 1 }}
          readinessProbe:
            {{- if .livenessCommand }}
            exec:
              command:
              {{- range .livenessCommand }}
              - {{ . }}
              {{- end }}
            {{- else }}
            httpGet:
              path: {{ coalesce .readinessPath .livenessPath $defaults.livenessPath }}
              port: {{ coalesce .readinessPort .livenessPort .port $defaults.port }}
              scheme: HTTP
            {{- end }}
            initialDelaySeconds: {{ coalesce .readinessInitialDelay $defaults.readinessInitialDelay 30 }}
            periodSeconds: {{ coalesce .readinessPeriod $defaults.readinessPeriod 10 }}
            timeoutSeconds: {{ coalesce .readinessTimeout $defaults.readinessTimeout 3 }}
            failureThreshold: {{ coalesce .readinessFailureThreshold $defaults.readinessFailureThreshold 6 }}
            successThreshold: {{ coalesce .readinessSuccessThreshold $defaults.readinessSuccessThreshold 1 }}
          {{- end }}
          envFrom:
            - prefix: COMMON_
              configMapRef:
                name: {{ template "myfullname" $root }}-common
          env:
            {{- if $httpProxy.enabled }}
            - name: DOMAIN_PROXY
              value: {{ template "myfullname" $root }}-{{ $serviceName }}-http-proxy:3128
            {{- end }}
            {{- if and (.serviceAccount) (eq $provider "gcp") }}
            {{- if .serviceAccount.secret }}
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /serviceaccount/{{ regexFind "[a-zA-Z0-9]*$" .serviceAccount.secret }}
            {{- end }}
            {{- end }}
            {{- range $name, $value := $defaults.env }}
            - name: {{ $name }}
              value: {{ $value | quote }}
            {{- end }}
            {{- range $name, $value := .env }}
            - name: {{ $name }}
              value: {{ $value | quote }}
            {{- end }}
            {{- range $name, $value := $defaults.secretEnv }}
            - name: {{ $name }}
              valueFrom:
                secretKeyRef:
                  name: {{ regexReplaceAll "\\.[.a-zA-Z0-9]*$" $value "" }}
                  key: {{ regexFind "\\.[.a-zA-Z0-9]*$" $value | substr 1 -1 }}
            {{- end }}
            {{- range $name, $value := .secretEnv }}
            - name: {{ $name }}
              valueFrom:
                secretKeyRef:
                  name: {{ regexReplaceAll "\\.[.a-zA-Z0-9]*$" $value "" }}
                  key: {{ regexFind "\\.[.a-zA-Z0-9]*$" $value | substr 1 -1 }}
            {{- end }}
          volumeMounts:
          {{- range $name, $value := $defaults.secrets }}
          {{- if $value }}
            - name: default- {{- lower $name | replace "_" "-" }}
              mountPath: /run/secrets/ {{- $name }}
              subPath: {{ $name }}
              readOnly: true
          {{- end }}
          {{- end }}
          {{- range $name, $value := .secrets }}
          {{- if $value }}
            - name: {{ lower $name | replace "_" "-" }}
              mountPath: /run/secrets/ {{- $name }}
              subPath: {{ $name }}
              readOnly: true
          {{- end }}
          {{- end }}
          {{- if .hostDevices }}
          {{- range .hostDevices }}
            - mountPath: {{ .path }}
              name: {{ .name }}
              readOnly: {{ .readOnly }}
          {{- end }}
          {{- end }}
          {{- if .temporaryVolumeMounts }}
          {{- range .temporaryVolumeMounts }}
            - mountPath: {{ .mountPath }}
              name: temporary-volume
              subPath: {{ .volumePath }}
              readOnly: {{ .readOnly }}
          {{- end }}
          {{- end }}
          {{- if $root.Values.persistence.enabled }}
          {{- if .persistentVolumeMounts }}
          {{- range .persistentVolumeMounts }}
            - mountPath: {{ .mountPath }}
              name: persistent-volume
              subPath: {{ .volumePath }}
              readOnly: {{ .readOnly }}
          {{- end }}
          {{- end }}
          {{- end }}
          {{- if .sidecar }}
          {{- if .sidecar.enabled }}
          {{- if .sidecar.sharedVolume }}
            - name: sidecar-volume
              mountPath: {{ .sidecar.sharedVolume.mountPath }}
          {{- end }}
          {{- end }}
          {{- end }}
          {{- if and (.serviceAccount) (eq $provider "gcp") }}
          {{- if .serviceAccount.secret }}
            - name: serviceaccount
              mountPath: /serviceaccount
              readOnly: true
          {{- end }}
          {{- end }}

        {{- if .sidecar }}
        {{- if .sidecar.enabled }}
        - name: {{ template "myname" $root }}-{{ .sidecar.name }}
          {{- if .sidecar.image }}
          image: {{ .sidecar.image }}
          {{- else }}
          image: {{ $global.registry -}} / {{- .sidecar.name -}} : {{- $global.build.imageTag }}
          {{- end }}
          imagePullPolicy: {{ $global.imagePullPolicy | quote }}
          securityContext:
            {{- if quote .sidecar.runAsUser }}
            runAsUser: {{ .sidecar.runAsUser }}
            {{- end }}
            {{- if quote .sidecar.runAsGroup }}
            runAsGroup: {{ .sidecar.runAsGroup }}
            {{- end }}
            privileged: {{ .sidecar.privileged | default false }}
            allowPrivilegeEscalation: {{ .sidecar.allowPrivilegeEscalation | default false }}
            capabilities:
              add:
                {{- if .sidecar.capabilities }}
                {{- range $cab := .sidecar.capabilities }}
                - {{ $cab }}
                {{- end }}
                {{- end }}
          {{- if .sidecar.command }}
          command:
            {{- range .sidecar.command }}
            - {{ . | quote }}
            {{- end }}
          {{- end }}
          ports:
            - containerPort: {{ .sidecar.targetPort | default .sidecar.port | default $defaults.port }}
            {{- range $p := .sidecar.ports }}
            - containerPort: {{ $p.targetPort | default $p.port }}
            {{- end }}
          {{- if not .sidecar.livenessDisabled }}
          livenessProbe:
            httpGet:
              path: {{ coalesce .sidecar.livenessPath $defaults.livenessPath }}
              port: {{ coalesce .sidecar.livenessPort .sidecar.port $defaults.port }}
              scheme: HTTP
            initialDelaySeconds: {{ coalesce .sidecar.livenessInitialDelay $defaults.livenessInitialDelay }}
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: {{ coalesce .sidecar.readinessPath .sidecar.livenessPath $defaults.livenessPath }}
              port: {{ coalesce .sidecar.readinessPort .sidecar.livenessPort .sidecar.port $defaults.port }}
              scheme: HTTP
            initialDelaySeconds: {{ coalesce .sidecar.readinessInitialDelay 30 }}
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: {{ coalesce .sidecar.readinessFailureThreshold 6 }}
            successThreshold: 1
          {{- end }}
          envFrom:
            - prefix: COMMON_
              configMapRef:
                name: {{ template "myfullname" $root }}-common
          env:
            {{- if and (.sidecar.serviceAccount) (eq $provider "gcp") }}
            {{- if .sidecar.serviceAccount.secret }}
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /serviceaccount/{{ regexFind "[a-zA-Z0-9]*$" .sidecar.serviceAccount.secret }}
            {{- end }}
            {{- end }}
            {{- range $name, $value := .sidecar.env }}
            - name: {{ $name }}
              value: {{ $value | quote }}
            {{- end }}
            {{- range $name, $value := .sidecar.secretEnv }}
            - name: {{ $name }}
              valueFrom:
                secretKeyRef:
                  name: {{ regexReplaceAll "\\.[.a-zA-Z0-9]*$" $value "" }}
                  key: {{ regexFind "\\.[.a-zA-Z0-9]*$" $value | substr 1 -1 }}
            {{- end }}
          volumeMounts:
          {{- range $name, $value := .sidecar.secrets }}
          {{- if $value }}
            - name: sidecar- {{- lower $name | replace "_" "-" }}
              mountPath: /run/secrets/ {{- $name }}
              subPath: {{ $name }}
              readOnly: true
          {{- end }}
          {{- end }}
          {{- if .sidecar.temporaryVolumeMounts }}
          {{- range .sidecar.temporaryVolumeMounts }}
            - mountPath: {{ .mountPath }}
              name: temporary-volume
              subPath: {{ .volumePath }}
              readOnly: {{ .readOnly }}
          {{- end }}
          {{- end }}
          {{- if $root.Values.persistence.enabled }}
          {{- if .sidecar.persistentVolumeMounts }}
          {{- range .sidecar.persistentVolumeMounts }}
            - mountPath: {{ .mountPath }}
              name: persistent-volume
              subPath: {{ .volumePath }}
              readOnly: {{ .readOnly }}
          {{- end }}
          {{- end }}
          {{- end }}
          {{- if .sidecar.sharedVolume }}
            - name: sidecar-volume
              mountPath: {{ .sidecar.sharedVolume.sidecarMountPath }}
          {{- end }}
          {{- if and (.sidecar.serviceAccount) (eq $provider "gcp") }}
          {{- if .sidecar.serviceAccount.secret }}
            - name: serviceaccount
              mountPath: /serviceaccount
              readOnly: true
          {{- end }}
          {{- end }}
        {{- end }}
        {{- end }}

        {{- if and (.db) (eq $provider "gcp") }}
        {{- if .db.useProxy }}
        - name: cloudsql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.18.0-alpine
          securityContext:
            runAsUser: 2
            runAsGroup: 2
            privileged: false
            allowPrivilegeEscalation: false
          command:
            - /cloud_sql_proxy
            - -verbose=false
            - -log_debug_stdout=true
            - --dir=/cloudsql
            - -instances={{ .db.instance }}=tcp:{{ .db.port }}
            - -credential_file=/secrets/cloudsql/{{ regexFind "[a-zA-Z0-9]*$" .db.proxySecret }}
          volumeMounts:
            - name: cloudsql-instance-credentials
              mountPath: /secrets/cloudsql
              readOnly: true
            - name: ssl-certs
              mountPath: /etc/ssl/certs
            - name: cloudsql
              mountPath: /cloudsql
        {{- end }}
        {{- end }}
      volumes:
        {{- if .hostDevices }}
        {{- range .hostDevices }}
        - hostPath:
            path: {{ .path }}
            type: {{ .type }}
          name: {{ .name }}
        {{- end }}
        {{- end }}
        {{- range $name, $value := $defaults.secrets }}
        {{- if $value }}
        - name: default- {{- lower $name | replace "_" "-" }}
          secret:
            secretName: {{ regexReplaceAll "\\.[.a-zA-Z0-9]*$" $value "" }}
            items:
            - key: {{ regexFind "\\.[.a-zA-Z0-9]*$" $value | substr 1 -1 }}
              path: {{ $name }}
        {{- end }}
        {{- end }}
        {{- range $name, $value := .secrets }}
        {{- if $value }}
        - name: {{ lower $name | replace "_" "-" }}
          secret:
            secretName: {{ regexReplaceAll "\\.[.a-zA-Z0-9]*$" $value "" }}
            items:
            - key: {{ regexFind "\\.[.a-zA-Z0-9]*$" $value | substr 1 -1 }}
              path: {{ $name }}
        {{- end }}
        {{- end }}
        {{- if .sidecar }}
        {{- if .sidecar.enabled }}
        {{- range $name, $value := .sidecar.secrets }}
        {{- if $value }}
        - name: sidecar- {{- lower $name | replace "_" "-" }}
          secret:
            secretName: {{ regexReplaceAll "\\.[.a-zA-Z0-9]*$" $value "" }}
            items:
            - key: {{ regexFind "\\.[.a-zA-Z0-9]*$" $value | substr 1 -1 }}
              path: {{ $name }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if .temporaryVolumeMounts }}
        - name: temporary-volume
          emptyDir:
        {{- end }}
        {{- if $root.Values.persistence.enabled }}
        {{- if .persistentVolumeMounts }}
        - name: persistent-volume
          persistentVolumeClaim:
            claimName: {{ .persistentVolumeClaim | default $root.Values.persistence.existingClaim | default (include "fullname" $root) }}
        {{- end }}
        {{- end }}
        {{- if .sidecar }}
        {{- if .sidecar.enabled }}
        {{- if .sidecar.sharedVolume }}
        - name: sidecar-volume
          emptyDir:
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if and (.db) (eq $provider "gcp") }}
        {{- if .db.useProxy }}
        - name: cloudsql-instance-credentials
          secret:
            secretName: {{ regexReplaceAll "\\.[a-zA-Z0-9]*$" .db.proxySecret "" }}
        - name: ssl-certs
          hostPath:
            path: /etc/ssl/certs
        - name: cloudsql
          emptyDir:
        {{- end }}
        {{- end }}
        {{- if and (.serviceAccount) (eq $provider "gcp") }}
        {{- if .serviceAccount.secret }}
        - name: serviceaccount
          secret:
            secretName: {{ regexReplaceAll "\\.[a-zA-Z0-9]*$" .serviceAccount.secret "" }}
        {{- end }}
        {{- end }}
---
{{- if $httpProxy.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "myfullname" $root }}-{{ $serviceName }}-http-proxy
spec:
  replicas: {{ $defaults.replicas | default 1 }}
  selector:
    matchLabels:
      app: {{ template "myname" $root }}
      release: {{ $root.Release.Name }}
      tier: proxy
      role: {{ $serviceName }}-http-proxy
  template:
    metadata:
      labels:
        app: {{ template "myname" $root }}
        release: {{ $root.Release.Name }}
        tier: proxy
        role: {{ $serviceName }}-http-proxy
    spec:
      automountServiceAccountToken: false
      {{- if .nodeSelector }}
      nodeSelector:
      {{- range $name, $value := .nodeSelector }}
        {{ $name }}: {{ $value | quote }}
      {{- end }}
      {{- else if $defaults.nodeSelector }}
      nodeSelector:
      {{- range $name, $value := $defaults.nodeSelector }}
        {{ $name }}: {{ $value | quote }}
      {{- end }}
      {{- end }}
      containers:
        - name: {{ template "myname" $root }}-{{ $serviceName }}-http-proxy
          image: {{ .httpProxyImage | default $defaults.httpProxyImage }}
          imagePullPolicy: {{ $global.imagePullPolicy | quote }}
          ports:
            - containerPort: 3128
          resources:
            requests:
              cpu: 2m
              memory: 2Mi
            limits:
              cpu: 50m
              memory: 100Mi
          # TODO: liveness and readiness probe (squid returns HTTP 400)
          env:
            - name: SITES_WHITELIST
              value: {{ range $egress := .egress }}{{ if $egress.domain }}{{ $egress.domain }} {{ end }}{{ end }}
---
{{- end }}

{{- end }}
{{- end }}
{{- end }}
{{- end }}
